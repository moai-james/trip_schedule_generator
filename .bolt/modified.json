[["/home/project/src/contexts/LanguageContext.tsx","import React, { createContext, useState, useContext, ReactNode } from 'react';\nimport { Language } from '../types';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string, params?: Record<string, string>) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {\n  const [language, setLanguage] = useState<Language>('zh');\n\n  const translations: Record<Language, Record<string, string>> = {\n    en: {\n      title: 'AI Travel PDF Generator',\n      subtitle: 'Create beautiful travel itineraries with AI',\n      addDay: 'Add Day',\n      addLocation: 'Add Location',\n      removeDay: 'Remove Day',\n      removeLocation: 'Remove Location',\n      generateItinerary: 'Generate Itinerary',\n      back: 'Back',\n      loading: 'Loading...',\n      errorProcessingTripData: 'An error occurred while processing trip data. Please try again.',\n      downloadPDF: 'Download PDF',\n      day: 'Day',\n      enterLocation: 'Enter a location',\n      preview: 'Preview',\n      edit: 'Edit',\n      selectImages: 'Select Images for Your Trip',\n      continueToIntroductions: 'Continue to Introductions',\n      editIntroductions: 'Edit Introductions',\n      continueToPreview: 'Continue to Preview',\n      noImagesFound: 'No images found for {locationName}. Please try a different search term.',\n      backToForm: 'Back to Form',\n      tryAgain: 'Try Again',\n      failedToFetchImages: 'Failed to fetch images. Please try again.',\n      searching: 'Searching...',\n      searchImages: 'Search Images',\n      imagesFor: 'Images for',\n      time: 'Time',\n      allDays: 'All Days',\n    },\n    zh: {\n      title: 'AI 旅遊行程生成器',\n      subtitle: '使用 AI 創建精美的旅遊行程',\n      addDay: '新增天數',\n      addLocation: '新增地點',\n      removeDay: '移除天數',\n      removeLocation: '移除地點',\n      generateItinerary: '生成行程',\n      back: '返回',\n      loading: '載入中...',\n      errorProcessingTripData: '處理行程資料時發生錯誤。請重試。',\n      downloadPDF: '下載 PDF',\n      day: '第幾天',\n      enterLocation: '輸入地點',\n      preview: '預覽',\n      edit: '編輯',\n      selectImages: '為您的行程選擇圖片',\n      continueToIntroductions: '繼續編輯介紹',\n      editIntroductions: '編輯介紹',\n      continueToPreview: '繼續預覽',\n      noImagesFound: '找不到 {locationName} 的圖片。請嘗試不同的搜尋詞。',\n      backToForm: '返回表單',\n      tryAgain: '重試',\n      failedToFetchImages: '獲取圖片失敗。請重試。',\n      searching: '搜尋中...',\n      searchImages: '搜尋圖片',\n      imagesFor: '圖片：',\n      time: '時間',\n      allDays: '所有天數',\n    },\n  };\n\n  const t = (key: string, params?: Record<string, string>): string => {\n    let translation = translations[language][key] || key;\n    if (params) {\n      Object.entries(params).forEach(([param, value]) => {\n        translation = translation.replace(`{${param}}`, value);\n      });\n    }\n    return translation;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};"],["/home/project/src/components/InteractiveMap.tsx","import React, { useEffect, useRef, useState } from 'react';\nimport { TripData, TripLocation } from '../types';\nimport { useLanguage } from '../contexts/LanguageContext';\n\ninterface InteractiveMapProps {\n  tripData: TripData;\n  onBack: () => void;\n}\n\nconst InteractiveMap: React.FC<InteractiveMapProps> = ({ tripData, onBack }) => {\n  const { t } = useLanguage();\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [selectedLocation, setSelectedLocation] = useState<TripLocation | null>(null);\n  const [selectedDay, setSelectedDay] = useState<number | null>(null);\n  const [directionsRenderer, setDirectionsRenderer] = useState<google.maps.DirectionsRenderer | null>(null);\n\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    const google = window.google;\n    const map = new google.maps.Map(mapRef.current, {\n      zoom: 10,\n      center: { lat: 0, lng: 0 },\n    });\n\n    const bounds = new google.maps.LatLngBounds();\n    const infoWindow = new google.maps.InfoWindow();\n    const newDirectionsRenderer = new google.maps.DirectionsRenderer({ map });\n    setDirectionsRenderer(newDirectionsRenderer);\n\n    const markers: google.maps.Marker[] = [];\n\n    tripData.days.forEach((day, dayIndex) => {\n      day.locations.forEach((location, locationIndex) => {\n        const geocoder = new google.maps.Geocoder();\n        geocoder.geocode({ placeId: location.placeId }, (results, status) => {\n          if (status === 'OK' && results && results[0]) {\n            const position = results[0].geometry.location;\n            const marker = new google.maps.Marker({\n              map,\n              position,\n              title: location.name,\n              label: `${dayIndex + 1}-${locationIndex + 1}`,\n            });\n\n            bounds.extend(position);\n            map.fitBounds(bounds);\n\n            marker.addListener('click', () => {\n              setSelectedLocation(location);\n              infoWindow.setContent(`<h3>${location.name}</h3><p>${t('day')} ${dayIndex + 1}, ${t('time')}: ${location.time}</p>`);\n              infoWindow.open(map, marker);\n            });\n\n            markers.push(marker);\n          }\n        });\n      });\n    });\n\n    // Filter markers based on selected day\n    const filterMarkers = (day: number | null) => {\n      markers.forEach((marker, index) => {\n        const markerDay = parseInt(marker.getLabel()!.split('-')[0]);\n        marker.setVisible(day === null || markerDay === day);\n      });\n    };\n\n    // Initial filter\n    filterMarkers(selectedDay);\n\n    // Update filter when selectedDay changes\n    return () => {\n      filterMarkers(selectedDay);\n    };\n  }, [tripData, t, selectedDay]);\n\n  useEffect(() => {\n    if (selectedDay !== null && directionsRenderer) {\n      const directionsService = new google.maps.DirectionsService();\n      const dayLocations = tripData.days[selectedDay - 1].locations;\n\n      if (dayLocations.length < 2) return;\n\n      const origin = dayLocations[0];\n      const destination = dayLocations[dayLocations.length - 1];\n      const waypoints = dayLocations.slice(1, -1).map(location => ({\n        location: { placeId: location.placeId },\n        stopover: true\n      }));\n\n      directionsService.route(\n        {\n          origin: { placeId: origin.placeId },\n          destination: { placeId: destination.placeId },\n          waypoints: waypoints,\n          travelMode: google.maps.TravelMode.DRIVING\n        },\n        (result, status) => {\n          if (status === 'OK' && result) {\n            directionsRenderer.setDirections(result);\n          }\n        }\n      );\n    } else if (directionsRenderer) {\n      directionsRenderer.setDirections({ routes: [] });\n    }\n  }, [selectedDay, tripData, directionsRenderer]);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <button onClick={onBack} className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">\n          {t('back')}\n        </button>\n        <select\n          value={selectedDay || ''}\n          onChange={(e) => setSelectedDay(e.target.value ? Number(e.target.value) : null)}\n          className=\"border rounded px-2 py-1\"\n        >\n          <option value=\"\">{t('allDays')}</option>\n          {tripData.days.map((_, index) => (\n            <option key={index} value={index + 1}>\n              {t('day')} {index + 1}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div ref={mapRef} style={{ width: '100%', height: '400px' }} />\n      {selectedLocation && (\n        <div className=\"mt-4 p-4 border rounded\">\n          <h3 className=\"text-xl font-semibold mb-2\">{selectedLocation.name}</h3>\n          <p className=\"mb-2\">{t('time')}: {selectedLocation.time}</p>\n          {tripData.images && tripData.images[selectedLocation.name] && (\n            <img\n              src={tripData.images[selectedLocation.name]}\n              alt={selectedLocation.name}\n              className=\"w-full max-w-md mx-auto mb-4 rounded\"\n            />\n          )}\n          {tripData.introductions && tripData.introductions[selectedLocation.name] && (\n            <p>{tripData.introductions[selectedLocation.name]}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InteractiveMap;"]]